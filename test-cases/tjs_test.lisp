(defun fold (f initial xs)
    ((Function a b a) a (Array a) (Array b))
    (let a initial)
    (for (let i 0) (< i (len xs)) (inc i)
        (set a (f a (get x i))))
    a)

(defun map (f xs)
    ((Function a b) (Dictionary a) (Dictionary b))
    (const o (dictionary))
    (const ks (keys xs))
    (for (let i 0) (< i (len ks)) (inc i)
        (const k (get ks i))
        (set o k (f (get xs k)))))

(defun sum (xs)
    ((Array Number) (Number))
    (let a 0)
    (for (let i 0) (< i (len xs)) (inc i)
        (set a (+ a (get xs i))))
    a)

(const xs (array 1 2 3 4 5 6 7 8 9 10))
(log xs)
